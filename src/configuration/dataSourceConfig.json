{
  "metadata": {
    "dbDateFormat": "%Y-%m-%dT%H:%M:%S.%LZ"
  },

  "globalInputs":[
    {
      "referenceId": "globalAsOfDate",
      "label": "As of date (inclusive)",
      "type": "datetime",
      "value": "{today}"
    }
  ],
  
  "dataSources" : [
    {
      "name": "Current date",
      "isStoredProcedure": false,
      "query": "select getdate() as currentDate",
      "sqlParameters": [],
      "resultHandling": [
        {
          "filename": "currentDate.json",
          "qa": {}
        }
      ]
    },
    {
      "name": "DoubleNumber",
      "isStoredProcedure": false,
      "query": "select {1}*2 as passedValue",
      "sqlParameters": [
        {
          "label": "Number to double",
          "type": "int",
          "value": 6
        }
      ],
      "resultHandling": [
        {
          "filename": "DoubleNumber.json",
          "qa": {
            "scripts": [],
            "chart": null
          }
        }
      ]
    },

    {
      "name": "Triple and Double",
      "isStoredProcedure": false,
      "query": "select {1}*3 as passedValue; select {2}*2 as passedValue",
      "sqlParameters": [
        {
          "label": "Number to triple",
          "type": "int",
          "value": 10
        },
        {
          "label": "Number to double",
          "type": "int",
          "value": 10
        }
      ],
      "resultHandling": [
        {
          "filename": "TripleNumberFile.json",
          "qa": {
            "scripts": [
              {"function": "findMedian", "parameters": ["passedValue"]},
              {"function": "findMax", "parameters": ["passedValue"]}
            ]
          }
        },
        {
          "filename": "DoubleNumberFile.json",
          "qa": {
            "scripts": []
          }
        }
        
      ]
    },

    {
      "name": "BrokerLiquidity",
      "isStoredProcedure": true,
      "query": "marketing2..broker_liquidity",
      "sqlParameters": [],
      "resultHandling": [
        {
          "filename": "BrokerLiquidity.json",
          "qa": {
            "scripts": [],
            "asOfDateField": "date",
            "chart": null
          }
        }
      ]
    },

    {
      "name": "RiskPremium",
      "notes": "Provides DP, market spread and expected loss over time",
      "isStoredProcedure": false,
      "query": "select price_date as date, SUBSTRING('abcdefghijkmnopqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXY',CONVERT(int, RAND(CAST(RIGHT(CAST(CAST(CRYPT_GEN_RANDOM(4) AS INT) AS VARCHAR(100)), 1) AS INT)) * 45),5) as randomAlphaString, CONVERT(varchar(255), NEWID()) as randomString, dp1 as dp, spread as marketSpread, expected_loss as expectedLossSpread from macro..expected_loss order by price_date; select price_date as date, dp1 as dp, spread as marketSpread, expected_loss as expectedLossSpread from macro..expected_loss order by price_date",
      "sqlParameters": [],
      "resultHandling": [
        {
          "filename": "RiskPremium.json",
          "qa": {
            "sparkPlusMetadataOnFields": ["dp", "marketSpread"],
            "asOfDateField": "date",
            "scripts": [
              {"function": "findMax", "parameters": ["dp"]},
              {"function": "findMedian", "parameters": ["marketSpread"]},
              {"function": "makeSparkline", "parameters": ["marketSpread"]}
            ]
          }
        },
        {
          "filename": "RiskPremium2.json",
          "qa": {
            "sparkPlusMetadataOnFields": ["expectedLossSpread"],
            "asOfDateField": "date",
            "scripts": [
              {"function": "findMin", "parameters": ["expectedLossSpread"]}
            ]
          }
        }
      ]
      
    },

    {
      "name": "TestUserName",
      "isStoredProcedure": false,
      "query": "select * from user_admin..user_login; select * from user_admin..user_login where user_id < {1} and ldap_user_name like '%{2}%'",
      "sqlParameters": [
        {
          "label": "user Id number less than:",
          "type": "int",
          "value": 30
        },
        {
          "label": "ldap name contains:",
          "type": "varchar",
          "value": "a"
        }
      ],
      "resultHandling": [
        {
          "filename": "TestUserName1.json",
          "qa": {
            "scripts": [],
            "chart": null
          }
        },
        {
          "filename": "TestUserName2.json",
          "qa": {
            "scripts": [],
            "chart": null
          }
        }
      ]
    }


    
  ]



}